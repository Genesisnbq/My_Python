
# * 闭包
# * 函数嵌套


def f1():
    print('外层函数f1')

    def f2():
        print('内层函数f2')

    return f2()  # ! 没有返回值, 默认返回的就是 none


f1()

# ! 函数名() 是函数调用, 不带括号可以看作是一个变量


def f1():
    print('外层函数f1')

    def f2():
        print('内层函数f2')

    return f2  # !


res = f1()
print(res)

res()  # ! 直接运行这个变量, 就是闭包

#! 函数内嵌套函数时, 外层函数返回内层函数的函数名, 称为闭包


def f1(num1):
    print(num1)

    def f2(num2):
        res = num1+num2
        print(res)
    return f2


res = f1(66)  # ! 闭包
res(88)

#! 总结
""" 
1. 函数内的变量, 函数外部访问不了
2. 函数执行完毕后, 函数内的变量会被销毁
3. 应用场景: 如果我们执行函数后, 要把函数的某个变量保存下来,
4. 操作: 在函数内部去定义一个函数, 用这个内部函数去引用这个变量, 同时将内层函数的函数名当作
返回值返回, 不调用
5. 这个时候内存函数就讲需要保留的变量给包含在他的内存空间了, 这就是闭包
6. 通过内层函数保留函数中的变量
"""
"""
外层函数变量为了在函数执行后依然在内存中保存, 我们把变量包在内层函数中存放, 内层函数不调用, 不执行,不释放
"""
